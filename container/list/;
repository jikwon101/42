#include <iostream>
#include <list>
#include "list.hpp"
#include <memory>

class Test;
class Test
{
public:
	int nbr1;
	int nbr2;
	const char *_next;
	const char *_next2;
	Test()
	{
		nbr1 = nbr2 = 100;
		std::cout << "construct...\n";
	}
	Test(int n) : _next(NULL)
	{	
		nbr1 = nbr2 = n;
		std::cout << "construct with number....\n";
	}
	Test(const Test& src)
	{
		nbr1 = nbr2 = src.nbr1;
		std::cout << "construct by copying.....\n";
	}
	~Test()
	{
		std::cout << "Bye bye...\n";
	}
};
bool operator==(Test const& lhs, Test const& rhs)
{
	return (lhs.nbr1 == rhs.nbr2);
}
bool operator!=(Test const& lhs, Test const& rhs)
{
	return (lhs.nbr1 != rhs.nbr2);
}
std::ostream& operator<<(std::ostream& os, const Test& src)
{
	os << src.nbr1;
	return (os);
}
template <typename T>
void	print(const ft::list<T>& list)
{
	typename ft::list<T>::const_iterator it;

	std::cout << "list : ";
	for (it = list.begin() ; it != list.end() ; it++)
	{
		std::cout << *it << " ";
	}
	std::cout << "\n";
}

int main()
{
	const int n = 0;
	{
		const ft::list<int> ttt(1, 4);
		ft::list<int>::iterator it;
		ft::list<int>::const_iterator it2;
		//it1 = it2; //error
		//it2 = it1;
		std::cout << "RETURN\n";
	}
	
	std::cout << "----------------\n";
	{	
		const std::list<int> ttt(1, 4);
		std::list<int>::const_iterator it2;
		std::list<int>::iterator it1(it2);
		//it1 = it2; //error
		std::cout << "RETURN\n";
	}	
	std::cout << "----------------\n";
	
}
